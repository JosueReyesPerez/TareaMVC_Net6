@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer;

@{
    ViewData["Title"] = "Listado Tareas";
}

<div class="text-center">
    <h1 class="display-4">@localizer["Mis Tareas"]</h1>
    <button type="button" class="btn btn-primary mb-3" onclick="agregarNuevaTareaAlListado()">@localizer["Nueva-Tarea"]</button>
</div>

<div id="contenedor-listado-tareas" class="text-center">

    <div id="reordenable" class="text-start" data-bind="foreach: tareas">
        <div name="tarea" class="border mb-2 p-2" style="cursor:pointer"
            data-bind="click: manejarClickTarea">
            <div data-bind="text: titulo, hidden: esNuevo" class="fw-blold">
            </div>

            <div name="pasos-resumen" data-bind="visible: pasosTotal()>0">
                <span data-bind="text:pasosRealizados"></span>/<span data-bind="text:pasosTotal"></span>
                <span data-bind="text:porcentajeCompletado"></span>
            </div>

            <input type="text" name="titulo-tarea" data-bind="value: titulo, visible:esNuevo, 
                attr: {'data-id':id},
                event:{focusout: manejarFocusoutTituloTarea}" />
        </div>
    </div>

    <div data-bind="visible: cargando" class="spinner-border">
        @*<span class="vissually-hidden">Cargando...</span>*@
    </div>

    <div data-bind="visible: noHayTareas">
        No hay tareas...
    </div>

</div>

<partial name="_ModalEditarTarea" />
@section Scripts{
    @*<script src="~/js/utilidades.js"></script>*@
    <script asp-append-version="true" src="~/js/utilidades.js"></script>
    <script asp-append-version="true" src="~/js/tareas.js"></script>
    <script asp-append-version="true" src="~/js/pasos.js"></script>
    <script asp-append-version="true" src="~/js/archivos-adjuntos.js"></script>
    <script>

        const urlTareas = "/api/tareas";
        const urlPasos = "/api/Pasos";
        const modalEditarTarea = document.getElementById('modal-editar-tarea');
        const modalEditarTareaBoostrap = new bootstrap.Modal(modalEditarTarea);

        function tareasListadoViewModelFn(){
            var self = this;// para mantener una referencia constante al ViewModel 
            self.tareas = ko.observableArray([]); //Ya no son variables ya son propiedades 
            self.cargando = ko.observable(true);

            //propiedad especial que se derivan de una o más propiedades observables existentes
            self.noHayTareas = ko.pureComputed(function(){
                if(self.cargando()){ //Si carganfo es vedarero lo pasamos a falso
                    return false;
                }

                return self.tareas().length === 0; //Vemos que sea igual a 0 si lo es con data-blin mostramos un mensaje 
            });
        }

        function tareaElementoListadoViewModel({id, titulo, pasosTotal, pasosRealizados}){
            var self = this;
            self.id = ko.observable(id);
            self.titulo = ko.observable(titulo);

            self.pasosTotal = ko.observable(pasosTotal);
            self.pasosRealizados = ko.observable(pasosRealizados);

            self.esNuevo = ko.pureComputed(function(){
                return self.id() === 0;
            });

            self.porcentajeCompletado = ko.pureComputed(function(){
                const calculo = Math.round(self.pasosRealizados() * 1.0 / self.pasosTotal() * 100);
                return `(${calculo}%)`;
            });
        }

        const tareasListadoViewModel = new tareasListadoViewModelFn();

        const tareaEditarViewModel = {
            id: 0, 
            titulo: ko.observable(''), 
            descripcion: ko.observable(''), 
            pasos: ko.observableArray([]), 
                archivosAdjuntos: ko.observableArray([]), 
        }

        function pasoViewModel({id, descripcion, realizado, modoEdicion}){
            var self = this;
            self.id = ko.observable(id || 0);
            self.descripcion = ko.observable(descripcion || '');
            self.descripcionAnterior = '';
            self.realizado = ko.observable(realizado);
            self.modoEdicion = ko.observable(modoEdicion);
            self.esNuevo = ko.pureComputed(function(){
                return self.id() == 0;
            });
        }

        obtenerTareas();

        ko.applyBindings(tareasListadoViewModel, document.getElementById('contenedor-listado-tareas'));
        ko.applyBindings(tareaEditarViewModel, document.getElementById('modal-editar-tarea'));
    </script>
}